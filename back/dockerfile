# ------------ base ------------
FROM node:22-slim AS base
WORKDIR /app

# Instala pnpm globalmente
RUN npm install -g pnpm

# Dependência de runtime do Prisma Client
RUN apt-get update && apt-get install -y --no-install-recommends openssl \
    && rm -rf /var/lib/apt/lists/*

# ------------ deps (prod deps + prisma client) ------------
FROM base AS deps
COPY package.json pnpm-lock.yaml ./
COPY prisma ./prisma
# Instala só as deps de produção e gera o Prisma Client nelas
RUN pnpm install --frozen-lockfile --prod \
    && pnpm prisma generate

# ------------ builder (dev deps para compilar) ------------
FROM base AS builder
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile
COPY tsconfig*.json nest-cli.json* ./
COPY src ./src
COPY public ./public
COPY prisma ./prisma
# Gera client para o ambiente de build também
RUN pnpm prisma generate
# Compila
RUN pnpm run build

# ------------ runner (imagem final) ------------
FROM node:22-slim AS runner
WORKDIR /app

# Instala pnpm globalmente
RUN npm install -g pnpm

# Só runtime necessário para Prisma
RUN apt-get update && apt-get install -y --no-install-recommends openssl \
    && rm -rf /var/lib/apt/lists/*

ENV NODE_ENV=production
ENV PORT=3001
EXPOSE 3001

# Copia node_modules de produção (com Prisma Client) e o build
COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist
# Copia schema para migrations em runtime (se necessário)
COPY prisma ./prisma

# Usuário não-root para segurança
RUN groupadd --gid 1001 nodejs
RUN useradd --uid 1001 --gid nodejs --shell /bin/bash --create-home nextjs
USER nextjs

CMD ["node", "dist/main.js"]
