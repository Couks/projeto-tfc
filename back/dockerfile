# ------------ base ------------
  FROM node:22-slim AS base
  WORKDIR /app

  # Dependência de runtime do Prisma Client
  RUN apt-get update && apt-get install -y --no-install-recommends openssl \
    && rm -rf /var/lib/apt/lists/*

  # Habilita pnpm via Corepack (não instalar pnpm global!)
  RUN corepack enable && corepack prepare pnpm@latest --activate

  # ------------ deps (prod: node_modules + prisma client) ------------
  FROM base AS deps
  # Copiamos apenas manifestos + lockfile + prisma (camadas estáveis)
  COPY package.json pnpm-lock.yaml ./
  COPY prisma ./prisma

  # Cache do store do pnpm para builds rápidos (BuildKit)
  RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store \
      pnpm install --prod --frozen-lockfile \
   && pnpm prisma generate

  # ------------ builder (dev: compila a app) ------------
  FROM base AS builder
  COPY package.json pnpm-lock.yaml ./
  # deps de dev para compilar
  RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store \
      pnpm install --frozen-lockfile

  # Código e assets
  COPY tsconfig*.json nest-cli.json* ./
  COPY src ./src
  COPY public ./public
  COPY prisma ./prisma

  # Gera client (se necessário no build) e compila
  RUN pnpm prisma generate \
   && pnpm run build
  # se você ainda tiver um postbuild "Windows", troque por:
  # mkdir -p dist/public/static && cp -r public/static/* dist/public/static/ || true

  # ------------ runner (imagem final, mínima) ------------
  FROM node:22-slim AS runner
  WORKDIR /app

  # Só o necessário para Prisma no runtime
  RUN apt-get update && apt-get install -y --no-install-recommends openssl \
    && rm -rf /var/lib/apt/lists/*

  ENV NODE_ENV=production
  ENV PORT=3001
  EXPOSE 3001

  # Usuário não-root para segurança
  RUN groupadd --gid 1001 nodejs \
   && useradd --uid 1001 --gid nodejs --shell /bin/bash --create-home appuser

  # Copiamos artefatos já prontos do build
  # (usa UID:GID para não depender de nomes na fase de build)
  COPY --from=deps --chown=1001:1001 /app/node_modules ./node_modules
  COPY --from=builder --chown=1001:1001 /app/dist ./dist
  # (Opcional) manter schema/migrations se você roda `prisma migrate deploy` no start/ação
  COPY --chown=1001:1001 prisma ./prisma

  USER 1001

  CMD ["node", "dist/main.js"]
